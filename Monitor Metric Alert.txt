Monitor Metric Alert

main

/*
    Monitor Metric Alerts
      
    Loads
      - Resource Group          - Default Resource Group for Resources
      - Action Group            - Existing Action Group

    Resources
      - Monitor Metric Alert
    
    Naming Standards (https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming)
      - Monitor Metric Alert    - <name>
*/
// - Data gathering

// - Main Resources

# - Monitor Metric Alert
resource "azurerm_monitor_metric_alert" "this" {
  for_each            = var.monitor_metric_alerts
  name                = each.value.name
  resource_group_name = lookup(each.value, "resource_group_name", null) == null ? var.resource_group.name : each.value.resource_group_name
  scopes              = each.value.scopes #(Required) A set of strings of resource IDs at which the metric criteria should be applied.

  enabled                  = lookup(each.value, "enabled", null)                  #(Optional) Should this Metric Alert be enabled? Defaults to true.
  auto_mitigate            = lookup(each.value, "auto_mitigate", null)            #(Optional) Should the alerts in this Metric Alert be auto resolved? Defaults to true.
  description              = lookup(each.value, "description", null)              #(Optional) The description of this Metric Alert.
  frequency                = lookup(each.value, "frequency", null)                #(Optional) The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are PT1M, PT5M, PT15M, PT30M and PT1H. Defaults to PT1M.
  severity                 = lookup(each.value, "severity", null)                 #(Optional) The severity of this Metric Alert. Possible values are 0, 1, 2, 3 and 4. Defaults to 3.
  target_resource_type     = lookup(each.value, "target_resource_type", null)     #(Optional) The resource type (e.g. Microsoft.Compute/virtualMachines) of the target resource.
  target_resource_location = lookup(each.value, "target_resource_location", null) #(Optional) The location of the target resource.
  window_size              = lookup(each.value, "window_size", null)              #(Optional) The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than frequency. Possible values are PT1M, PT5M, PT15M, PT30M, PT1H, PT6H, PT12H and P1D. Defaults to PT5M.
  tags                     = lookup(each.value, "tags", null)

  dynamic "criteria" { #(Optional) One or more (static) criteria blocks as defined below.
    for_each = lookup(each.value, "criteria", [])
    content {
      metric_namespace = criteria.value.metric_namespace #(Required) One of the metric namespaces to be monitored.
      metric_name      = criteria.value.metric_name      #(Required) One of the metric names to be monitored.
      aggregation      = criteria.value.aggregation      #(Required) The statistic that runs over the metric values. Possible values are Average, Count, Minimum, Maximum and Total.
      operator         = criteria.value.operator         #(Required) The criteria operator. Possible values are Equals, NotEquals, GreaterThan, GreaterThanOrEqual, LessThan and LessThanOrEqual.
      threshold        = criteria.value.threshold        #(Required) The criteria threshold value that activates the alert.

      skip_metric_validation = lookup(criteria.value, "skip_metric_validation", null) #(Optional) Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted? Defaults to false.

      dynamic "dimension" { #(Optional) One or more dimension blocks as defined below.
        for_each = lookup(criteria.value, "dimension", [])
        content {
          name     = dimension.value.name     #(Required) One of the dimension names.
          operator = dimension.value.operator #(Required) The dimension operator. Possible values are Include, Exclude and StartsWith.
          values   = dimension.value.values   #(Required) The list of dimension values.        
        }
      }
    }
  }

  dynamic "dynamic_criteria" { #(Optional) A dynamic_criteria block as defined below.
    for_each = lookup(each.value, "dynamic_criteria", [])
    content {
      metric_namespace  = dynamic_criteria.value.metric_namespace  #(Required) One of the metric namespaces to be monitored.
      metric_name       = dynamic_criteria.value.metric_name       #(Required) One of the metric names to be monitored.
      aggregation       = dynamic_criteria.value.aggregation       #(Required) The statistic that runs over the metric values. Possible values are Average, Count, Minimum, Maximum and Total.
      operator          = dynamic_criteria.value.operator          #(Required) The criteria operator. Possible values are LessThan, GreaterThan and GreaterOrLessThan.
      alert_sensitivity = dynamic_criteria.value.alert_sensitivity #(Required) The extent of deviation required to trigger an alert. Possible values are Low, Medium and High.

      evaluation_total_count   = lookup(dynamic_criteria.value, "evaluation_total_count", null)   #(Optional) The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (window_size) and the selected number of aggregated points.
      evaluation_failure_count = lookup(dynamic_criteria.value, "evaluation_failure_count", null) #(Optional) The number of violations to trigger an alert. Should be smaller or equal to evaluation_total_count.
      ignore_data_before       = lookup(dynamic_criteria.value, "ignore_data_before", null)       #(Optional) The ISO8601 date from which to start learning the metric historical data and calculate the dynamic thresholds.
      skip_metric_validation   = lookup(dynamic_criteria.value, "skip_metric_validation", null)   #(Optional) Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted? Defaults to false.

      dynamic "dimension" { #(Optional) One or more dimension blocks as defined below.
        for_each = lookup(dynamic_criteria.value, "dimension", [])
        content {
          name     = dimension.value.name     #(Required) One of the dimension names.
          operator = dimension.value.operator #(Required) The dimension operator. Possible values are Include, Exclude and StartsWith.
          values   = dimension.value.values   #(Required) The list of dimension values.        
        }
      }
    }
  }

  dynamic "application_insights_web_test_location_availability_criteria" { #(Optional) A application_insights_web_test_location_availability_criteria block as defined below.
    for_each = lookup(each.value, "application_insights_web_test_location_availability_criteria", [])
    content {
      web_test_id           = application_insights_web_test_location_availability_criteria.value.web_test_id           #(Required) The ID of the Application Insights Web Test.
      component_id          = application_insights_web_test_location_availability_criteria.value.component_id          #(Required) The ID of the Application Insights Resource.
      failed_location_count = application_insights_web_test_location_availability_criteria.value.failed_location_count #(Required) The number of failed locations.      
    }
  }

  dynamic "action" { #(Optional) One or more action blocks as defined below.
    for_each = lookup(each.value, "action", [])
    content {
      action_group_id    = lookup(var.action_groups, action.value.action_group_key).id #(Required) The ID of the Action Group can be sourced from the azurerm_monitor_action_group resource
      webhook_properties = lookup(action.value, "webhook_properties", null)            #(Optional) The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
    }
  }
}




var

# - Core object

# - Load Existing Resources
variable "resource_group" {
  description = "Existing resource group. Assign object map from a 'resource' block, 'module' optput block or 'data' block"
  type        = any
}

variable "action_groups" {
  description = "Existing monitor action groups. Assign object map from a 'resource' block, 'module' optput block or 'data' block"
  type        = any
}

# - Main Resources
variable "monitor_metric_alerts" {
  description = "The Monitor Metric Alerts for resources with their properties."
  type        = any
}


output

